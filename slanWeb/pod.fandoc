**************************************************************************
** title:      slanweb
** author:     chunquedong
** created:    2010-9-23
** copyright:  Copyright (c) 2010, chunquedong
** license:    Licensed under the Academic Free License version 3.0
**************************************************************************

Overview [#overview]
********************


Run Mode [#runMode]
=============

There are two way to run service. scriptMode/podMode(debug mode/product mode)
- scriptMode is instant for change,
- podMode is easy to deploy.

- The debug mode by 'slanWeb::main'.
- The product mode by 'appHome/fan/boot/Main.fan'.

Route [#route]
=============

See the uri 'http://localhost:8080/action/Welcome/print/115?i=123&m=bac'
    it will route to 'action'(dir) and compile 'Welcome.fan'(class),
    then newInstance 'Welecome' and call 'printInfo'(method) with 'i=123,m=bac'(named params)

Most of the time, you should just use 'http://localhost:8080/Welcome/print'
    it will route to 'action' and call Welcome's print method.
    if no method be provide ,will to 'index' method.

Html Template [#htmlTemplate]
=============
The template code like this:

   <html>
    <head>
      <title>Welcome</title>
    </head>
    <body>
     <h1>Welcome @name !</h1>
     #for(i := 0; i < 3; i++)
     #{
        <h4>abc${i}line</h4>
     #}
    </body>
  </html>

Fantom code start with '#'(escape '#' with '##').
Other code will be output directly.
In fact the string be compile to fantom string, so we can embedded '$ interpolation'

Pass Arguments [#passArguments]
-----------
'm->name' is short cut of 'req.stash'. It be used to pass args from controller to view.
we get the args in template code by '@name'.
'@' is more shortcut of 'm->', but in the html '@name' equals '${m->name.toStr.toXml}'.

Render [#render]
-----------
Call the 'SlanWeblet#render' to render the template. Default template by the action name.
If res is not commited and has no null retruning value, the result will be serialized and render as plan text.

Controller [#controller]
=============
Subclass your controller from 'SlanWeblet' will be convenience.

You can override the method 'SlanWeblet#invoke' to insert your logic, like this:

  const class Controller : SlanWeblet
  {
    override Obj? invoke(Str name, Obj?[]? args)
    {
      if (!checkAuthority) res.sendErr(401)
      Obj? result
      //open connection
      connection.use
      {
        result = this.trap(name, args)
      }
      return result
    }
  }

'SlanWeblet' has some util method, such as stashId, setContentType, toUri, esc...

